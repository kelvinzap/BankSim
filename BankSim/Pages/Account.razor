@page "/accounts/{id}"
@inject IAccount accountAction
@inject NavigationManager navManager


<div class="flex justify-between">
    <h1 style="font-weight:bold; font-size:30px">Account Details</h1>

    @if(accountDto != null)
    {
        <div class="account-det-btns">
            <div class="flex justify-evenly text-center">
                <a href="transfer/@accountDto.CustomerId" class="button-17" style="font-size:12px; font-weight:500; ">
            
                    <svg class="mt-[5px]" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"  viewBox="0 0 16 16" style="margin-top: 0;">
                        <path fill-rule="evenodd" d="M1 11.5a.5.5 0 0 0 .5.5h11.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 11H1.5a.5.5 0 0 0-.5.5zm14-7a.5.5 0 0 1-.5.5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H14.5a.5.5 0 0 1 .5.5z" />
                    </svg>
                    <span>
                        <p class="mt-[5px] ml-[3px]" style="margin-bottom: 3px;font-size: inherit;">Transfer</p>
                    </span>
                </a>
            </div>
            
            <div class="flex justify-evenly text-center pl-18">
                <a href="accounts/fund/@accountDto.Id" class="button-17" style="font-size:12px; font-weight:500; ">

                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="mt-[5px]" style="margin-top: 0;" viewBox="0 0 16 16">
                        <path d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H1zm7 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" />
                        <path d="M0 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V5zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V7a2 2 0 0 1-2-2H3z" />
                    </svg>
                    <span>
                        <p class="mt-[5px] ml-[3px]" style="margin-bottom: 3px;font-size: inherit;">Fund Account</p>
                    </span>
                </a>
            </div>

        </div>
    }
</div>


@if(accountDto != null)
{
    
    <div class="account-det mt-10">

        <div class="account-det-card card ml-0">
            <span class="account-det-title">Account Number</span>
            <span class="account-det-data">@accountDto.AccountNumber</span>
        </div>

        <div class="account-det-card card">
            <span class="account-det-title">Balance</span>
                <span class="account-det-data">&#x20A6;@(string.Format("{0:0,0.00}", accountDto.Balance))</span>
        </div>

        <div class="account-det-card card">
            <span class="account-det-title">Account Name</span>
            <span class="account-det-data">@accountDto.AccountName</span>
        </div>

        <div class="account-det-card card mr-0">
            <span class="account-det-title">Account Type</span>
            <span class="account-det-data">@accountDto.Type</span>
        </div>

    </div>



        <div class="card">
            <EditForm Model="filters" OnSubmit="() => FilterTransactions()">


                <div class="trans-filter-cont">

                    <div class="filters">
                        <label for="inputEmail4" class="form-label">Start Date</label>
                        <InputDate id="firstname" class="form-control" placeholder="firstname" @bind-Value="filters.StartDate" />
                    </div>

                    <div class="filters">
                        <label for="inputEmail4" class="form-label">End Date</label>
                        <InputDate id="firstname" class="form-control" placeholder="firstname" @bind-Value="filters.EndDate" />
                    </div>
                    <div class="filters">
                        <label for="inputEmail4" class="form-label">Status</label>
                        <select class="form-control" @bind="filters.Status">
                            <option value="">All</option>
                            <option value="00">00</option>
                            <option value="01">01</option>
                            <option value="09">09</option>
                            <option value="13">13</option>
                            <option value="14">14</option>
                            <option value="25">25</option>
                            <option value="61">61</option>
                        </select>

                    </div>

                    <div class="filters">
                        <label for="inputEmail4" class="form-label">Session ID</label>
                        <InputText @bind-Value="filters.SessionId" id="sessionId" class="form-control" placeholder="sessionId" />
                    </div>
                    <div class="filters">
                        <label for="institution" class="form-label">Institution</label>
                        <InputText @bind-Value="filters.Institution" id="institution" class="form-control" placeholder="institution" />
                    </div>                 
                    <div class="filters" style="display: grid;align-items: end;">
                        <button type="submit" class="btn btn-primary">Search</button>
                    </div>

                </div>

            </EditForm>
        </div>

     <div class="card">
            <div class="transactions">





                <div>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Session Id</th>
                                <th scope="col">Account Id</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Status</th>
                                <th scope="col">Source Institution</th>
                                <th scope="col">Destination Institution</th>                             
                                <th scope="col">Date of transaction</th>
                                <th scope="col"></th>
                            </tr>

                        </thead>

                        @if (transacDto.Transactions != null)
                        {
                            @foreach (var transaction in transacDto.Transactions)
                            {

                                string myMarkup = string.IsNullOrEmpty(transaction.MainTransactionId) ? transaction.SessionId : $"<p style=\"margin: 0;line - height: 1; font-size: 12px;\"> {transaction.MainTransactionId}</p>  <br> {transaction.SessionId}";

                                string myAmountMarkup = transaction.TransactionType == "DEBIT" ? $"<p style=\"color: red;\"> -{string.Format("{0:0,0.00}", transaction.Amount)}</p>" : $"<p style=\"color: green;\"> +{string.Format("{0:0,0.00}", transaction.Amount)}</p>";

                                <tbody>
                                    <tr>
                                        <td scope="row" class="table-data" @onclick="(() => OpenDetails(transaction))">@(startSerialNumber + transacDto.Transactions.IndexOf(transaction))</td>
                                        <td>@((MarkupString)myMarkup)</td>
                                        <td>@(transaction.TransactionType == "DEBIT" ? transaction.SourceAccount : transaction.DestinationAccount)</td>
                                        <td>@((MarkupString)myAmountMarkup)</td>
                                        <td>@transaction.ResponseCode</td>
                                        <td>@transaction.SourceBankCode</td>
                                        <td>@transaction.DestinationBankCode</td>                                       
                                        <td>@transaction.EntryDate.ToString("MM/dd/yyyy")</td>
                                        <td class="table-data green" @onclick="(() => OpenDetails(transaction))"><i class="bi bi-eye-fill"></i></td>

                                    </tr>
                                </tbody>
                            }
                        }
                    </table>


                </div>

            </div>
    </div>
    @if (transacDto.Transactions.Count > 0)
    {
        <span style="display: flex;justify-content: flex-end;padding-top: 18px;">
            <Pagination ActivePageNumber=currentPageNumber
                        PageChanged="OnPageChangedAsync"
                        TotalPages="@transacDto.TotalPages"
                        DisplayPages="5"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight" />
        </span>
    }
}




@code {
    [Parameter]
    public string Id { get; set; }
    private TransactionsDto transacDto = new();
    private TransactionFilter filters = new();

    private int itemsPerPage = 20;
    private int startSerialNumber => (currentPageNumber - 1) * itemsPerPage + 1;
    private int currentPageNumber = 1;
    private AccountDto accountDto;


    protected override async Task OnInitializedAsync()
    {
        accountDto = await accountAction.GetAccountDetails(Id);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetAccountTransactions(1);
            StateHasChanged();
        }
    }


    private async Task OnPageChangedAsync(int newPageNumber)
    {
       // await GetAccountTransactions(newPageNumber);
        await FilterTransactions(newPageNumber);
        await Task.Run(() =>
        {
            currentPageNumber = newPageNumber;

        });
    }

    private async Task GetAccountTransactions(int page)
    {
        var paginationFilter = new PaginationFilter
        {
            PageNumber = page
        };

        var output = await accountAction.GetAccountTransactions(Id, paginationFilter);
        transacDto = output;
    }

    private void OpenDetails(TransactionDto transaction)
    {
        navManager.NavigateTo($"transactions/{transaction.Id}");
    }

    private void Transfer(AccountDto account)
    {
        navManager.NavigateTo($"transfer/{account.CustomerId}");
    }



    private async Task FilterTransactions(int pageNumber = 1)
    {
        currentPageNumber = pageNumber;
        var paginationFilter = new PaginationFilter
            {
                PageNumber = pageNumber
            };

        var filter = new TransactionFilter
            {
                StartDate = filters.StartDate,
                EndDate = filters.EndDate,
                SessionId = filters.SessionId,
                Status = filters.Status,
                Institution = filters.Institution                
            };

        transacDto = await accountAction.GetAccountTransactions(Id, paginationFilter, filter);

        StateHasChanged();

    }
}
